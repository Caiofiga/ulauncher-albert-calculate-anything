name: macOS
on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/ci-macos.yml'
      - 'docs/**'
      - 'misc/**'
      - '__init__.py'
      - '.gitignore'
      - 'LICENSE'
      - 'main.py'
      - 'manifest.json'
      - 'README.md'
      - 'versions.json'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ master ]
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/ci-macos.yml'
      - 'docs/**'
      - 'misc/**'
      - '__init__.py'
      - '.gitignore'
      - 'LICENSE'
      - 'main.py'
      - 'manifest.json'
      - 'README.md'
      - 'versions.json'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            path: ~/Library/Caches/pip
        python-version: [ '3.6', '3.7', '3.8', '3.9' ]
    name: OS ${{ matrix.os }} - Python ${{ matrix.python-version }}
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.path }}
          key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements/*requirements.txt') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-pip-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -r requirements/dev-requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest and generate report
        run: |
          pytest --cov-config=./.coveragerc --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          name: os:${{ matrix.os }}-python:${{ matrix.python-version }}
          directory: ./cover/xml
          files: coverage.xml
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          verbose: true
